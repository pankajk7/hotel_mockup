package com.hotel_mockup_activities;

import java.util.ArrayList;
import java.util.Calendar;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

import com.google.gson.JsonObject;
import com.hotel_mockup.R;
import com.hotel_mockup_data.DataEngine;
import com.hotel_mockup_data.RestWebservices;
import com.hotel_mockup_utils.AlertDialogMessage;
import com.hotel_mockup_utils.BackgroundNetwork_withLoading;
import com.hotel_mockup_utils.ConnectionDetector;
import com.hotel_mockup_utils.Constants;
import com.hotel_mockup_utils.DevicePreferences;
import com.hotel_mockup_utils.Validations;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;

public class HotelCreationActivity extends BaseActivity {

	FrameLayout frameLayout;
	Context context;

	EditText primaryEmailEditText;
	EditText nameEditText;
	EditText zipCodeEditText;
	EditText cityEditText;
	EditText addressEditText;
	EditText landMark1EditText;
	EditText landMark2EditText;
	EditText webSiteEditText;
	EditText sameDayEditText;
	EditText totalRoomEditText;
	EditText facilitiesEditText;
	EditText descriptionEditText;
	EditText twitterLinkEditText;
	EditText facebookLinkEditText;

	TextView checkInTextView;
	TextView checkOutTextView;

	Button saveButton;
	Button nextButton;

	int mYear, mMonth, mDay;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// setContentView(R.layout.home_creation_layout);
		frameLayout = (FrameLayout) findViewById(R.id.layout_container);
		frameLayout.removeAllViews();
		frameLayout.addView(getLayoutInflater().inflate(
				R.layout.hotel_creation_layout, null));

		context = HotelCreationActivity.this;

		findViews();
		Listeners();
		setValues();
	}

	public void findViews() {

		stepsTextView = (TextView) findViewById(R.id.textview_base_stepstext);
		pageNameTextView = (TextView) findViewById(R.id.textview_base_PageName);

		primaryEmailEditText = (EditText) findViewById(R.id.edittext_hotel_creation_email);
		nameEditText = (EditText) findViewById(R.id.edittext_hotel_creation_name);
		zipCodeEditText = (EditText) findViewById(R.id.edittext_hotel_creation_zipcode);
		cityEditText = (EditText) findViewById(R.id.edittext_hotel_creation_city);
		addressEditText = (EditText) findViewById(R.id.edittext_hotel_creation_address);
		landMark1EditText = (EditText) findViewById(R.id.edittext_hotel_creation_landmark1);
		landMark2EditText = (EditText) findViewById(R.id.edittext_hotel_creation_landmark2);
		webSiteEditText = (EditText) findViewById(R.id.edittext_hotel_creation_website);
		totalRoomEditText = (EditText) findViewById(R.id.edittext_hotel_creation_totalroom);
		descriptionEditText = (EditText) findViewById(R.id.edittext_hotel_creation_description);
		twitterLinkEditText = (EditText) findViewById(R.id.edittext_hotel_creation_twitter);
		facebookLinkEditText = (EditText) findViewById(R.id.edittext_hotel_creation_facebook);

		checkInTextView = (TextView) findViewById(R.id.textview_hotel_creation_checkin);
		checkOutTextView = (TextView) findViewById(R.id.textview_hotel_creation_checkout);

		saveButton = (Button) findViewById(R.id.button_hotel_cration_save);
		nextButton = (Button) findViewById(R.id.button_hotel_cration_next);
		
	}

	public void Listeners() {
		nextButton.setEnabled(true);
		saveButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				
				if(!new ConnectionDetector(context).isConnectedToInternet()){
					new AlertDialogMessage(context).showMessage("Error", Constants.NO_Internet);
					return;
				}
				
				Validations objValidations = new Validations(
						HotelCreationActivity.this);

//				if (objValidations.validateHotelCreation(primaryEmailEditText,
//						nameEditText, zipCodeEditText, cityEditText,
//						addressEditText, landMark1EditText, landMark2EditText,
//						webSiteEditText, sameDayEditText, totalRoomEditText,
//						facilitiesEditText, descriptionEditText,
//						twitterLinkEditText, facebookLinkEditText,
//						checkInTextView, checkOutTextView)) {
//					return;
//				}

//				DevicePreferences objDevicePreferences = new DevicePreferences();
//				objDevicePreferences.addKey(context, Constants.primaryEmail,
//						primaryEmailEditText.getText().toString());
//				objDevicePreferences.addKey(context, Constants.name,
//						nameEditText.getText().toString());
//				objDevicePreferences.addKey(context, Constants.zipCode,
//						zipCodeEditText.getText().toString());
//				objDevicePreferences.addKey(context, Constants.city,
//						cityEditText.getText().toString());
//				objDevicePreferences.addKey(context, Constants.address,
//						addressEditText.getText().toString());
//				objDevicePreferences.addKey(context, Constants.landmark1,
//						landMark1EditText.getText().toString());
//				objDevicePreferences.addKey(context, Constants.landmark2,
//						landMark2EditText.getText().toString());
//				objDevicePreferences.addKey(context, Constants.website,
//						webSiteEditText.getText().toString());
//				objDevicePreferences.addKey(context, Constants.totalroom,
//						totalRoomEditText.getText().toString());
//				objDevicePreferences.addKey(context, Constants.description,
//						descriptionEditText.getText().toString());
//				objDevicePreferences.addKey(context, Constants.twitterLink,
//						twitterLinkEditText.getText().toString());
//				objDevicePreferences.addKey(context, Constants.facebookLink,
//						facebookLinkEditText.getText().toString());
//				nextButton.setEnabled(true);
				
				callToWebservice();
			}
		});

		nextButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				Intent intent = new Intent(context, HotelImageActivity.class);
				startActivity(intent);
				finish();
			}
		});

		checkInTextView.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				showDatePicker(v);
			}
		});

		checkOutTextView.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				showDatePicker(v);
			}
		});

		webSiteEditText.setOnEditorActionListener(new OnEditorActionListener() {

			@Override
			public boolean onEditorAction(TextView v, int actionId,
					KeyEvent event) {
				if (actionId == EditorInfo.IME_ACTION_NEXT) {
//					View view = getWindow().getCurrentFocus();
					InputMethodManager imm = (InputMethodManager)getSystemService(
						      Context.INPUT_METHOD_SERVICE);
						imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
					showDatePicker(checkInTextView);
				}
				return false;
			}
		});

		checkInTextView.setOnEditorActionListener(new OnEditorActionListener() {

			@Override
			public boolean onEditorAction(TextView v, int actionId,
					KeyEvent event) {
				if (actionId == EditorInfo.IME_ACTION_NEXT) {
					showDatePicker(v);
				}
				return false;
			}
		});
	}

	public void setValues() {
		Resources res = getResources();
		String stepsString = String.format(res.getString(R.string.steps), 1);
		stepsTextView.setText(stepsString);

		pageNameTextView.setText("Registration");
	}

	public void showDatePicker(View view) {
		final Calendar c = Calendar.getInstance();
		mYear = c.get(Calendar.YEAR);
		mMonth = c.get(Calendar.MONTH);
		mDay = c.get(Calendar.DAY_OF_MONTH);

		final TextView textview = (TextView) view;
		
		DatePickerDialog dpd = new DatePickerDialog(this,
				new DatePickerDialog.OnDateSetListener() {

					@Override
					public void onDateSet(DatePicker view, int year,
							int monthOfYear, int dayOfMonth) {
						textview.setText((monthOfYear + 1) + "/" + dayOfMonth
								+ "/" + year);
					}
				}, mYear, mMonth, mDay);
		dpd.show();
	}
	
	public void callToWebservice(){
		new BackgroundNetwork_withLoading(HotelCreationActivity.this){
			String idString;
			protected Void doInBackground(Void[] params) {
				
				DevicePreferences objDevicePreferences = new DevicePreferences();
				
				ArrayList<NameValuePair> list = new ArrayList<NameValuePair>(); 
//				list.add(new BasicNameValuePair(Constants.Authenticity_Token, objDevicePreferences.getString(HotelCreationActivity.this, Constants.Authenticity_Token, "")));
//				list.add(new BasicNameValuePair(Constants.primaryEmail, primaryEmailEditText.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.name, nameEditText.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.zipCode, zipCodeEditText.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.city, cityEditText.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.address, addressEditText.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.landmark1, landMark1EditText.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.totalroom, totalRoomEditText.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.description, descriptionEditText.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.checkInTime, checkInTextView.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.checkOutTime, checkOutTextView.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.cutOffTime, checkOutTextView.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.facility, checkOutTextView.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.latitude, lati.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.longitude, checkOutTextView.getText().toString().trim()));
//				list.add(new BasicNameValuePair(Constants.primaryEmail, "test7@test7.com"));
//				list.add(new BasicNameValuePair(Constants.name, "name"));
//				list.add(new BasicNameValuePair(Constants.zipCode, "111222"));
//				list.add(new BasicNameValuePair(Constants.city, "udrpr"));
//				list.add(new BasicNameValuePair(Constants.address, "addrr"));
//				list.add(new BasicNameValuePair(Constants.landmark1, "mark1"));
//				list.add(new BasicNameValuePair(Constants.totalroom, "3"));
//				list.add(new BasicNameValuePair(Constants.description, "descrptn"));
//				list.add(new BasicNameValuePair(Constants.checkInTime, "57600"));
//				list.add(new BasicNameValuePair(Constants.checkOutTime, "43200"));
//				list.add(new BasicNameValuePair(Constants.cutOffTime, "43200"));
//				list.add(new BasicNameValuePair(Constants.facility, "9"));
//				list.add(new BasicNameValuePair(Constants.latitude, "24.558"));
//				list.add(new BasicNameValuePair(Constants.longitude, "73.7024"));
				
				JsonObject jsonObject = new JsonObject();
				jsonObject.addProperty(Constants.primaryEmail, "test7@test7.com");
				jsonObject.addProperty(Constants.name, "name");
				jsonObject.addProperty(Constants.zipCode, "111222");
				jsonObject.addProperty(Constants.city, "udrpr");
				jsonObject.addProperty(Constants.address, "addrr");
				jsonObject.addProperty(Constants.landmark1, "mark1");
				jsonObject.addProperty(Constants.totalroom, "3");
				jsonObject.addProperty(Constants.description, "descrptn");
				jsonObject.addProperty(Constants.checkInTime, "57600");
				jsonObject.addProperty(Constants.checkOutTime, "43200");
				jsonObject.addProperty(Constants.cutOffTime, "43200");
				jsonObject.addProperty(Constants.facility, "9");
				jsonObject.addProperty(Constants.latitude, "24.558");
				jsonObject.addProperty(Constants.longitude, "73.7024");
				
				DataEngine objDataEngine = new DataEngine(HotelCreationActivity.this);
				idString = objDataEngine.createHotel(jsonObject);
				return null;
			};
			
			protected void onPostExecute(Void result) {				
				super.onPostExecute(result);
				if(idString.equalsIgnoreCase("")){
					new AlertDialogMessage(HotelCreationActivity.this).showMessage("Error", idString);
				}else{
					new DevicePreferences().addKey(HotelCreationActivity.this, Constants.Hotel_Id, idString);
				}
				
			};
		}.execute();
	}
	
	public void createHotel(){
		JsonObject jsonObject = new JsonObject();
		jsonObject.addProperty(Constants.primaryEmail, "test7@test7.com");
		jsonObject.addProperty(Constants.name, "name");
		jsonObject.addProperty(Constants.zipCode, "111222");
		jsonObject.addProperty(Constants.city, "udrpr");
		jsonObject.addProperty(Constants.address, "addrr");
		jsonObject.addProperty(Constants.landmark1, "mark1");
		jsonObject.addProperty(Constants.totalroom, "3");
		jsonObject.addProperty(Constants.description, "descrptn");
		jsonObject.addProperty(Constants.checkInTime, "57600");
		jsonObject.addProperty(Constants.checkOutTime, "43200");
		jsonObject.addProperty(Constants.cutOffTime, "43200");
		jsonObject.addProperty(Constants.facility, "9");
		jsonObject.addProperty(Constants.latitude, "24.558");
		jsonObject.addProperty(Constants.longitude, "73.7024");
		
		Object object = jsonObject;
		
		RestWebservices objRestWebservices = new RestWebservices(HotelCreationActivity.this);
		objRestWebservices.serviceCall(Constants.createHotel, "", object);
	}

}
